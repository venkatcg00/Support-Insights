services:
  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${PROJECT_PASSWORD}
      MYSQL_USER: ${PROJECT_USER}
      MYSQL_PASSWORD: ${PROJECT_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d
    networks:
      - data-network
    healthcheck:
      test: ["CMD", "mysql", "-h", "localhost", "-u", "${PROJECT_USER}", "-p${PROJECT_PASSWORD}", "-e", "SHOW DATABASES LIKE '${AIRFLOW_DB}';"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 20s

  mongodb:
    image: bitnami/mongodb:6.0
    container_name: mongodb
    restart: always
    environment:
      MONGODB_ROOT_USER: ${PROJECT_USER}
      MONGODB_ROOT_PASSWORD: ${PROJECT_PASSWORD}
      MONGODB_DATABASE: ${MONGO_DB}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/bitnami/mongodb
    networks:
      - data-network
    healthcheck:
      test: ["CMD", "mongosh", "--host", "localhost", "--username", "${PROJECT_USER}", "--password", "${PROJECT_PASSWORD}", "--eval", "db.runCommand('ping').ok", "--quiet"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 20s

  zookeeper:
    image: bitnami/zookeeper:3.9
    container_name: zookeeper
    restart: always
    environment:
      ZOO_PORT_NUMBER: 2181
      ZOO_SERVER_ID: 1
      ZOO_TICK_TIME: 2000
      ALLOW_ANONYMOUS_LOGIN: "yes"
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/bitnami/zookeeper
    mem_limit: 512m
    mem_reservation: 256m
    networks:
      - data-network
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "-z", "localhost", "2181"]
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 30s

  kafka:
    image: bitnami/kafka:3.7
    container_name: kafka
    restart: always
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_CFG_LOG4J_ROOT_LOGLEVEL: DEBUG
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/bitnami/kafka
    mem_limit: 1.5g
    mem_reservation: 768m
    networks:
      - data-network
    healthcheck:
      test: ["CMD", "/opt/bitnami/kafka/bin/kafka-broker-api-versions.sh", "--bootstrap-server", "kafka:9092"]
      interval: 5s
      timeout: 10s
      retries: 30
      start_period: 120s

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: always
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    ports:
      - "8081:8080"
    networks:
      - data-network
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8080/api/clusters"]
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 30s

  minio:
    image: minio/minio:latest
    container_name: minio
    restart: always
    environment:
      MINIO_ROOT_USER: ${PROJECT_USER}
      MINIO_ROOT_PASSWORD: ${PROJECT_PASSWORD}
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - data-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s

  airflow:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    container_name: airflow
    restart: always
    depends_on:
      mysql:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: mysql+pymysql://${PROJECT_USER}:${PROJECT_PASSWORD}@${DB_HOST}:${DB_PORT}/${AIRFLOW_DB}
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW__LOGGING__BASE_LOG_FOLDER: /opt/airflow/logs
      AIRFLOW__LOGGING__LOGGING_LEVEL: DEBUG
      _AIRFLOW_WWW_USER_USERNAME: ${PROJECT_USER}
      _AIRFLOW_WWW_USER_PASSWORD: ${PROJECT_PASSWORD}
      _AIRFLOW_WWW_USER_FIRSTNAME: ${AIRFLOW_FIRSTNAME}
      _AIRFLOW_WWW_USER_LASTNAME: ${AIRFLOW_LASTNAME}
      _AIRFLOW_WWW_USER_EMAIL: ${AIRFLOW_EMAIL}
      _AIRFLOW_WWW_USER_ROLE: Admin
      AIRFLOW__API__AUTH_BACKENDS: airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session
    volumes:
      - ./Data-Loaders/Batch-Processing:/opt/airflow/dags
      - ./Data-Loaders/Stream-Processing:/opt/airflow/dags
      - ./Data-Loaders/plugins:/opt/airflow/plugins
      - ./Data-Loaders/dags:/opt/airflow/dags
      - airflow_logs:/opt/airflow/logs
    networks:
      - data-network
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep '[t]ail -f /dev/null'"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s

  python-runner:
    build:
      context: .
      dockerfile: Dockerfile.python-runner
    container_name: python-runner
    restart: always
    depends_on:
      mysql:
        condition: service_healthy
      minio:
        condition: service_healthy
    ports:
      - "1212:1212"
    environment:
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${PROJECT_USER}
      DB_PASSWORD: ${PROJECT_PASSWORD}
      MONGO_HOST: ${MONGO_HOST}
      MONGO_PORT: ${MONGO_PORT}
      MONGO_USER: ${PROJECT_USER}
      MONGO_PASSWORD: ${PROJECT_PASSWORD}
      MONGO_DB: ${MONGO_DB}
      MINIO_HOST: ${MINIO_HOST}
      MINIO_PORT: ${MINIO_PORT}
      MINIO_USER: ${PROJECT_USER}
      MINIO_PASSWORD: ${PROJECT_PASSWORD}
      MINIO_BUCKET: ${MINIO_BUCKET}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      KAFKA_TOPIC_NAME: ${KAFKA_TOPIC_NAME}
    volumes:
      - ./Data-Generators:/app/scripts
      - python_runner_logs:/app/logs
    networks:
      - data-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:1212/"]
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 30s

volumes:
  mysql_data:
  mongodb_data:
  minio_data:
  airflow_logs:
  python_runner_logs:
  zookeeper_data:
  kafka_data:

networks:
  data-network:
    driver: bridge